# PREP WORK
# ---------------------
# Create the initial docker machines
docker-machine create manager && \
    docker-machine create worker1 && \
    docker-machine create worker2

# Create the images for the basic service and log ip service
docker build -t basic-service:0.1.0 . && \
    docker tag basic-service:0.1.0 wcschlosser/basic-service:0.1.0 && \
    docker push wcschlosser/basic-service:0.1.0

docker build -t log-ip-service:0.1.0 . && \
    docker tag log-ip-service:0.1.0 wcschlosser/log-ip-service:0.1.0 && \
    docker push wcschlosser/log-ip-service:0.1.0

# Copy the stack file onto the manager
docker-machine scp ./stack.yaml manager:~/stack.yaml

# SSH into the three machines
docker-machine ssh manager
docker-machine ssh worker1
docker-machine ssh worker2

# Pull the images for both services so they are available
docker pull wcschlosser/basic-service:0.1.0 && \
    docker pull wcschlosser/log-ip-service:0.1.0 && \
    docker pull dockersamples/visualizer

# Create the visualizer container manually and show the swarm
docker run -it -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock dockersamples/visualizer

# Nothing there yet since swarm hasn't been created
# Create the swarm
docker swarm init --advertise-addr 192.168.99.100 # manager

# Get tokens for joining
docker swarm join-token manager # manager
docker swarm join-token worker # manager
# Join the two workers

# Deploy a basic service to the swarm
docker service ls # nothing, only works on manager
docker service create --name basic-service --publish 8000:8080 --replicas 6 wcschlosser/basic-service:0.1.0 # 2 per node

# Stream logs from all containers
docker service ls
docker service logs basic-service
docker service ps basic-service

# Hit port 80 on a manager and worker to see load balancing
curl 192.168.99.100:8000
curl 192.168.99.101:8000
curl 192.168.99.102:8000

# Kill a container and the swarm will bring it back up
docker kill cefacc2a9fa1

# ingress network is handling load balancing using the node port
docker network ls
docker network inspect ingress # network has been synced across the nodes 'swarm' scope

# Service containers are in the ingress network, so they can ping each other
docker exec -it ea601e42fe4d ping 10.255.0.9 # ping a service container from another
# But can't ping from the visualizer since it wasn't part of the service
docker exec -it c7e2e6a557d7 ping 10.255.0.9 # ping a service container from the viz container

# Could create docker networks and then attach containers to them
# But stack model makes it easier
# Stack file with basic service published and on workers. Log service internal (not in ingress network) and on manager
docker stack deploy -c stack.yaml stack
docker stack ls
docker stack services stack
docker stack ps stack

# Note the default stack network is created and all stack containers attached, and the log service is not in the ingress network
docker network ls
docker network inspect stack_default
docker network inspect ingress
docker inspect 7674b2febce1 # log ip container

# Can ping the logging service from within the stack network though (service to service without exposing)
docker exec -it d6bbcfb5fc53 ping 10.0.0.9 # ping log ip from a stack service
docker exec -it d6bbcfb5fc53 curl 10.0.0.9:8080
docker service logs stack_log_ip_service
# The overlay network also allows service discovery through DNS
docker exec -it d6bbcfb5fc53 curl stack_log_ip_service:8080
docker exec -it d6bbcfb5fc53 curl log_ip_service:8080 # also aliased so stack name isn't needed
